package main.программа.мое_меню;

import main.остов.меню.Меню;
import main.остов.меню.МенюБар;
import main.остов.меню.МенюПункт;
import main.остов.текст.Метка;
import main.остов.файл.Файл;
import main.программа.ГлавноеОкно;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

import static main.программа.мое_меню.ИменаПунктовМеню.*;

public class МоёМеню implements ActionListener {
    ГлавноеОкно главноеОкно;
    МенюБар менюБар;

    Меню менюФайл;
    МенюПункт файлСоздать, файлОткрыть, файлСохранить, файлСохранитьКак, файлПараметрыСтраницы, файлПечать, файлВыход;

    Меню менюПравка;
    МенюПункт правкаОтменить, правкаВырезать, правкаКопировать, правкаВставить, правкаУдалить,
            правкаНайти, правкаНайтиДалее, правкаЗаменить, правкаПерейти,
            правкаВыделитьВсё, правкаВремяИДата;

    Меню менюФормат;
    МенюПункт форматПереносПоСловам, форматШрифт;

    Меню менюВид;
    МенюПункт видСтрокаСостояния;

    Меню менюСправка;
    МенюПункт справкаПросмотретьСправку, справкаОПрограмме;

    FileDialog диалоговоеОкно;
    Метка меткаДляТекста;

    Файл файл;

    public МоёМеню(ГлавноеОкно главноеОкно, Файл файл) {
        this.главноеОкно = главноеОкно;
        this.файл = файл;
        менюБар = создатьМенюБар(); // Создать менюБар
        создатьМенюФайл(менюФайл, ФАЙЛ); // Создать меню Файл
        создатьМенюПравка(менюПравка, ПРАВКА); // Создать меню Правка
        создатьМенюФормат(менюФормат, ФОРМАТ); // Создать меню Правка
        создатьМенюВид(менюВид, ВИД); // Создать меню Правка
        создатьМенюСправка(менюСправка, СПРАВКА); // Создать меню Правка

        меткаДляТекста = new Метка("", Метка.ЦЕНТР);
        главноеОкно.add(меткаДляТекста, BorderLayout.CENTER);
    }

    private void создатьМенюСправка(Меню меню, String имя) {
        меню = создатьМеню(имя);

        справкаПросмотретьСправку = создатьПунктМеню(ПРОСМОТРЕТЬ_СПРАВКУ);
        добавитьПунктВМеню(меню, справкаПросмотретьСправку);
        справкаОПрограмме = создатьПунктМеню(О_ПРОГРАММЕ);
        добавитьПунктВМеню(меню, справкаОПрограмме);

        добавитьМенюВМенюБар(менюБар, меню);

        справкаПросмотретьСправку.addActionListener(this);
        справкаОПрограмме.addActionListener(this);
    }

    private void создатьМенюВид(Меню меню, String имя) {
        меню = создатьМеню(имя);

        видСтрокаСостояния = создатьПунктМеню(СТРОКА_СОСТОЯНИЯ); // РЕАЛИЗОВАТЬ checkbox
        добавитьПунктВМеню(меню, видСтрокаСостояния);

        добавитьМенюВМенюБар(менюБар, меню);

        видСтрокаСостояния.addActionListener(this);
    }

    private void создатьМенюФормат(Меню меню, String имя) {
        меню = создатьМеню(имя);

        форматПереносПоСловам = создатьПунктМеню(ПЕРЕНОС_ПО_СЛОВАМ);
        добавитьПунктВМеню(меню, форматПереносПоСловам);
        форматШрифт = создатьПунктМеню(ШРИФТ);
        добавитьПунктВМеню(меню, форматШрифт);

        добавитьМенюВМенюБар(менюБар, меню);

        форматПереносПоСловам.addActionListener(this);
        форматШрифт.addActionListener(this);
    }

    private void создатьМенюПравка(Меню меню, String имя) {
        меню = создатьМеню(имя);

        правкаОтменить = создатьПунктМеню(ОТМЕНИТЬ);
        правкаВырезать = создатьПунктМеню(ВЫРЕЗАТЬ);
        правкаКопировать = создатьПунктМеню(КОПИРОВАТЬ);
        правкаВставить = создатьПунктМеню(ВСТАВИТЬ);
        правкаУдалить = создатьПунктМеню(УДАЛИТЬ);
        правкаНайти = создатьПунктМеню(НАЙТИ);
        правкаНайтиДалее = создатьПунктМеню(НАЙТИ_ДАЛЕЕ);
        правкаЗаменить = создатьПунктМеню(ЗАМЕНИТЬ);
        правкаПерейти = создатьПунктМеню(ПЕРЕЙТИ);
        правкаВыделитьВсё = создатьПунктМеню(ВЫДЕЛИТЬ_ВСЁ);
        правкаВремяИДата = создатьПунктМеню(ВРЕМЯ_И_ДАТА);

        добавитьПунктВМеню(меню, правкаОтменить);
        добавитьРазделительГоризонтальный(меню);
        добавитьПунктВМеню(меню, правкаВырезать);
        добавитьПунктВМеню(меню, правкаКопировать);
        добавитьПунктВМеню(меню, правкаВставить);
        добавитьПунктВМеню(меню, правкаУдалить);
        добавитьРазделительГоризонтальный(меню);
        добавитьПунктВМеню(меню, правкаНайти);
        добавитьПунктВМеню(меню, правкаНайтиДалее);
        добавитьПунктВМеню(меню, правкаЗаменить);
        добавитьПунктВМеню(меню, правкаПерейти);
        добавитьРазделительГоризонтальный(меню);
        добавитьПунктВМеню(меню, правкаВыделитьВсё);
        добавитьПунктВМеню(меню, правкаВремяИДата);

        добавитьМенюВМенюБар(менюБар, меню);

        правкаОтменить.addActionListener(this);
        правкаВырезать.addActionListener(this);
        правкаКопировать.addActionListener(this);
        правкаВставить.addActionListener(this);
        правкаУдалить.addActionListener(this);
        правкаНайти.addActionListener(this);
        правкаНайтиДалее.addActionListener(this);
        правкаЗаменить.addActionListener(this);
        правкаПерейти.addActionListener(this);
        правкаВыделитьВсё.addActionListener(this);
        правкаВремяИДата.addActionListener(this);
    }

    private void создатьМенюФайл(Меню меню, String имя) {
        меню = создатьМеню(имя);

        // Создать пункты меню
        файлСоздать = создатьПунктМеню(СОЗДАТЬ);
        файлОткрыть = создатьПунктМеню(ОТКРЫТЬ);
        файлСохранить = создатьПунктМеню(СОХРАНИТЬ);
        файлСохранитьКак = создатьПунктМеню(СОХРАНИТЬ_КАК);
        файлПараметрыСтраницы = создатьПунктМеню(ПАРАМЕТРЫ_СТРАНИЦЫ);
        файлПечать = создатьПунктМеню(ПЕЧАТЬ);
        файлВыход = создатьПунктМеню(ВЫХОД);

        // Добавить пункты меню Файл
        добавитьПунктВМеню(меню, файлСоздать);
        добавитьПунктВМеню(меню, файлОткрыть);
        добавитьПунктВМеню(меню, файлСохранить);
        добавитьПунктВМеню(меню, файлСохранитьКак);
        добавитьРазделительГоризонтальный(меню);
        добавитьПунктВМеню(меню, файлПараметрыСтраницы);
        добавитьПунктВМеню(меню, файлПечать);
        добавитьРазделительГоризонтальный(меню);
        добавитьПунктВМеню(меню, файлВыход);

        // Добавить меню в меню бар
        добавитьМенюВМенюБар(менюБар, меню);

        // добавить слушателей для пунктов меню Открыть и Выход
        файлСоздать.addActionListener(this);
        файлОткрыть.addActionListener(this);
        файлСохранить.addActionListener(this);
        файлСохранитьКак.addActionListener(this);
        файлПараметрыСтраницы.addActionListener(this);
        файлПечать.addActionListener(this);
        файлВыход.addActionListener(this);
    }

    // Обработка нажатия на пункт меню
    public void actionPerformed(ActionEvent ae) {
        String пункт = ae.getActionCommand();
        switch (пункт) {
            // меню Файл
            case СОЗДАТЬ:
                создатьФайл();
                break;
            case ОТКРЫТЬ:
                открытьФайл();
                break;
            case СОХРАНИТЬ:
                сохранитьФайл();
                break;
            case СОХРАНИТЬ_КАК:
                сохранитьКакФайл();
                break;
            case ПАРАМЕТРЫ_СТРАНИЦЫ:
                // не реализовано
                break;
            case ПЕЧАТЬ:
                // не реализовано
                break;
            case ВЫХОД:
                закрытьПрограмму();
                break;

            // меню Правка
            case ОТМЕНИТЬ:
                // не реализовано
                break;
            case ВЫРЕЗАТЬ:
                // не реализовано
                break;
            case КОПИРОВАТЬ:
                // не реализовано
                break;
            case ВСТАВИТЬ:
                // не реализовано
                break;
            case УДАЛИТЬ:
                // не реализовано
                break;
            case НАЙТИ:
                // не реализовано
                break;
            case НАЙТИ_ДАЛЕЕ:
                // не реализовано
                break;
            case ЗАМЕНИТЬ:
                // не реализовано
                break;
            case ПЕРЕЙТИ:
                // не реализовано
                break;
            case ВЫДЕЛИТЬ_ВСЁ:
                // не реализовано
                break;
            case ВРЕМЯ_И_ДАТА:
                // не реализовано
                break;
        }
    }

    private void создатьФайл() {
        файл = new Файл(null);
        главноеОкно.removeAll();
        главноеОкно.добавитьТекстовоеОкно();
        главноеОкно.setVisible(true);
    }

    // Обработка открытия файла
    private void открытьФайл() {
        диалоговоеОкно = new FileDialog(главноеОкно, "Открыть файл", FileDialog.LOAD);
        диалоговоеОкно.setVisible(true);

        // строка содержащая путь к файлу
        String путь = диалоговоеОкно.getDirectory() + диалоговоеОкно.getFile();
        файл = new Файл(путь);

        StringBuilder текст = new StringBuilder();
        if (диалоговоеОкно.getFile() != null) {
            if (диалоговоеОкно.getFile().contains(".txt")) {
                try (BufferedReader буферЧтения = new BufferedReader(new FileReader(путь))) {
                    //чтение построчно
                    String строка;
                    while ((строка = буферЧтения.readLine()) != null) {
                        текст.append(строка);
                        текст.append("\n");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
                главноеОкно.получитьТекстовуюПлощадь().setText(текст.toString());
            } else {
                // всплывающее сообщение - не поддерживаемый формат
            }
        }
    }

    private void сохранитьФайл() {
        // получить имя открытого файла
        // если такого файла нет, то делаем сохранить как
        if (файл.получитьПолноеИмя() == null) {
            сохранитьКакФайл();
        } else {
            String текст = главноеОкно.получитьТекстовуюПлощадь().getText();

            File ф = new File(файл.получитьПолноеИмя());
            try (BufferedWriter буферЗаписи = new BufferedWriter(new FileWriter(ф.getAbsoluteFile()))){
                буферЗаписи.write(текст);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void сохранитьКакФайл() {
        диалоговоеОкно = new FileDialog(главноеОкно, "Сохранить файл", FileDialog.SAVE);
        диалоговоеОкно.setVisible(true);

        // строка содержащая путь к файлу
        String путь = диалоговоеОкно.getDirectory() + диалоговоеОкно.getFile();
        файл.установитьПолноеИмя(путь);

        String текст = главноеОкно.получитьТекстовуюПлощадь().getText();

        File файл = new File(путь);
        try (BufferedWriter буферЗаписи = new BufferedWriter(new FileWriter(файл.getAbsoluteFile()))){
            буферЗаписи.write(текст);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void добавитьМенюВМенюБар(МенюБар бар, Меню меню) {
        бар.add(меню);
    }

    private void добавитьПунктВМеню(Меню меню, МенюПункт пунктМеню) {
        меню.add(пунктМеню);
    }

    private void добавитьПунктВМеню(Меню меню, Меню пунктМеню) {
        меню.add(пунктМеню);
    }

    private МенюПункт создатьПунктМеню(String имя) {
        return new МенюПункт(имя);
    }

    private Меню создатьМеню(String имя) {
        return new Меню(имя);
    }

    private МенюБар создатьМенюБар() {
        return new МенюБар();
    }

    public void закрытьПрограмму() {
        if (файл.получитьПолноеИмя() != null) сохранитьФайл();
        System.exit(0);
    }

    public MenuBar получитьМенюБар() {
        return менюБар;
    }

    private void добавитьРазделительГоризонтальный(Меню меню) {
        меню.addSeparator();
    }
}